
* rewrite the math functions to use fewer registers (this ain't a risc processor)


* in order to support a unix/file-based os, I need to have a a block device of some kind, be it a ramdisk, a physical device of some kind, or a
  serial protocol that runs a disk emulator on a computer

* I need to make the interrupt handler print the number and info better, to make it easier to debug when serial-booting the kernel

* pasting text into the serial terminal is causing characters to be lost on the 68k end, and it's not clear what the cause is.  The overrun bit is set.
  It could be miniterm doesn't properly handle RTS/CTS signals, or that they aren't configured correctly on the 68681 end.  I've got a workaround to
  send bytes of a file slowly so it doesn't overrun, but even reading exclusively from the input as fast as possible when run from rom doesn't make the
  problem disappear completely


68k Single Board Computer:

	* in seems like AS in the interrupt ack is not necessary.  It can acknowledge the interrupt fine without it
	* a counter is not strictly needed for memory
	* add interrupt logic to schematic and pcb
	* you need a proper reset circuit that slowly turns it on through a cap?

	* if you have interrupts, and you connect at least one button to one of the IP change interrupts, then you could use the button for breaking into a debugger?
	* how can you modify the design to be better for debugging, possibly without an arduino.  Can you have step debugging through a hardware button, so that the bus
	  can be inspected?
	* can you have an debugger in the monitor software?  There are trap and breakpoint instructions in the processor for debugging, so if you define an interrupt handler
	  for those, you could have it enter a debugger, that possibly allows single stepping?  I'm not sure how to implement that

	* do I need optoisolators for the ftdi?  There is a blip where the arduino resets when the serial converter is connected

	* can you add a video/lcd expansion via the expansion connector?  Maybe you could get ends to directly connect it?  Would it be via parallel interface?
	  would you need a PIT 68230 to interface?  How complex are the interfaces of those graphic ones?
	* can you connect an esp01 as a wifi device?  I suppose you could connect it to the other serial port, even though it would be slow.  Is there another
	  way to get ethernet or wifi?

68k Arduino Shield:
	* need labels next to all pins
	* there's no way to reset the arduino with the shield on
	* there should be pins on the shield for anything not wired to the arduino directly, so that it can be plugged into despite ribbon cables being used
	* there should be a way on the arduino shield to enable, disable, or change the arduino's memory space



* it might be possible to do a 68030 single board computer, with 74LVC244/245 interfaces to an fpga chip, to provide the glue logic, but it would be a
  lot of surface mount chips, so you'd have to try a few smaller surface mount projects first
* make a surface mount/PLCC version of the 68k-SBC board to test SMT, since the design should work, and some of the memory chips are available as SMT

